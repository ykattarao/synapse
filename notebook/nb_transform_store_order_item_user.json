{
	"name": "nb_transform_store_order_item_user",
	"properties": {
		"folder": {
			"name": "mdm/domain/order/store-order/order-item-user"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsppdlinte201",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "ccda7d74-9875-4311-b1c3-c62c47f97d7f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/68ab6d29-6524-4862-8fb0-8b171dcf03a9/resourceGroups/rg-synw-pdlintegrations-nonprd-dev-e2-01/providers/Microsoft.Synapse/workspaces/synw-pdlintegrations-nonprd-dev-e2-01/bigDataPools/synsppdlinte201",
				"name": "synsppdlinte201",
				"type": "Spark",
				"endpoint": "https://synw-pdlintegrations-nonprd-dev-e2-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsppdlinte201",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"BASE_ADLS_CONN_STR = \"abfss://data-integration@sasynwpdlintnpdeve201.dfs.core.windows.net/\"\r\n",
					"TARGET_STORE_ORDER_ITEM_PATH = \"opco/{opco}/domain/order/store-order/master/order-item/\"\r\n",
					"TARGET_STORE_ORDER_ITEM_USER_PATH = \"opco/{opco}/domain/order/store-order/master/order-item-user/\"\r\n",
					"TARGET_STORE_ORDER_ITEM_USER_COLS = [\"order_num\", \"loyalty_id\", \"transaction_ts\", \"user_id\", \"pod_id\",\"qty_sld_amt\",\"total\",\"hash\"]\r\n",
					"YRS_DATA=1\r\n",
					"NO_OF_PARTITIONS = 25\r\n",
					"KEY_COL = [\"user_id\"]\r\n",
					"PARTITION_COLS = [\"hash\"]\r\n",
					"VAL_CNT_THRESHOLD = 10\r\n",
					"OPCO = \"fdln\""
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INCLUDE UTILS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/logging/nb_logging_util { LOGGER_NM: \"nb_transform_store_order_item_user\", LOGGING_LEVEL: \"INFO\" }"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/validation/nb_auto_data_validation_framework"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logger.info(\"**************************************************************************************\")\r\n",
					"logger.info(\" \\t MDM- STORE_ORDER -FULL-LOAD- Starting with below parameters\")\r\n",
					"logger.info(\"**************************************************************************************\")\r\n",
					"logger.info(\"\\t TARGET_STORE_ORDER_ITEM_PATH : {0}\".format(TARGET_STORE_ORDER_ITEM_PATH))\r\n",
					"logger.info(\"\\t TARGET_STORE_ORDER_ITEM_USER_PATH : {0}\".format(TARGET_STORE_ORDER_ITEM_USER_PATH))\r\n",
					"logger.info(\"\\t TARGET_STORE_ORDER_ITEM_USER_COLS : {0}\".format(TARGET_STORE_ORDER_ITEM_USER_COLS))\r\n",
					"logger.info(\"\\t OPCO :{0}\".format(OPCO))\r\n",
					"logger.info(\"\\t NO_OF_PARTITIONS:{0}\".format(NO_OF_PARTITIONS))\r\n",
					"logger.info(\"\\t YRS_DATA : {0}\".format(YRS_DATA))\r\n",
					"logger.info(\"\\t KEY_COL : {0}\".format(KEY_COL))\r\n",
					"logger.info(\"\\t PARTITION_COLS : {0}\".format(PARTITION_COLS))\r\n",
					"logger.info(\"**************************************************************************************\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as f \r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"\r\n",
					"def load_delta_toDF(path):\r\n",
					"    df_delta_load = DeltaTable.forPath(spark, path)\r\n",
					"    df_load=df_delta_load.toDF()\r\n",
					"    \r\n",
					"    logger.info(\"\\t STORE ORDER ITEM USER:Loading Delta file and converting them to DF.\\n OPCO = {0},\\n Path={1},\".format(OPCO,path))\r\n",
					"    return df_load \r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def load_store_order_users(df_load,path,opco):\r\n",
					"    df_load.repartition(1, \"user_id\") \\\r\n",
					"            .sort(KEY_COL) \\\r\n",
					"            .write \\\r\n",
					"            .format(\"delta\") \\\r\n",
					"            .mode(\"overwrite\") \\\r\n",
					"            .partitionBy(PARTITION_COLS) \\\r\n",
					"            .save(path)\r\n",
					"    logger.info(\"\\t STORE ORDER USER:Writing store order user into master.\\n OPCO = {0},\\n Path={1},\\n Count={2}\".format(opco,path,df_load.count()))\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"curr_date= f.current_date()\r\n",
					"from_date = curr_date - f.expr(\"INTERVAL \"+ str(YRS_DATA) +\" YEARS\")\r\n",
					"\r\n",
					"df_store_order_item_user_mstr=load_delta_toDF(BASE_ADLS_CONN_STR + TARGET_STORE_ORDER_ITEM_PATH.format(opco = OPCO))\r\n",
					"\r\n",
					"\r\n",
					"df_store_order_item_user_mstr=df_store_order_item_user_mstr \\\r\n",
					"    .filter((df_store_order_item_user_mstr.transaction_ts >= from_date) & (df_store_order_item_user_mstr.transaction_ts <= curr_date)) \\\r\n",
					"    .filter(\"user_id IS NOT NULL\") \\\r\n",
					"    .filter(\"loyalty_id IS NOT NULL\")\\\r\n",
					"    .withColumn(\"hash\", f.abs(f.hash(f.col(\"user_id\"))%NO_OF_PARTITIONS)) \\\r\n",
					"    .select(\"order_num\", \"loyalty_id\", \"transaction_ts\", \"user_id\", \"pod_id\",\"qty_sld_amt\",\"hash\")\r\n",
					"\r\n",
					"logger.info(\"get_all_stor_ord : Extract ALL store orders between {0} and {1}. OPCO = {2}, Count = {3}\".format(from_date, curr_date,OPCO, df_store_order_item_user_mstr.count()))                         \r\n",
					"\r\n",
					"    \r\n",
					"if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_STORE_ORDER_ITEM_USER_PATH.format(opco = OPCO) )):\r\n",
					"\r\n",
					"    df_store_order_users_mstr=load_delta_toDF(BASE_ADLS_CONN_STR + TARGET_STORE_ORDER_ITEM_USER_PATH .format(opco = OPCO))\r\n",
					"\r\n",
					"\r\n",
					"    logger.info(\"\\t STORE ORDER USERS : Store Order users loaded from master. OPCO = {0}, Count={1}\".format(OPCO, df_store_order_users_mstr.count()))\r\n",
					"    is_val_success= validate_count(df_store_order_users_mstr,df_store_order_item_user_mstr,VAL_CNT_THRESHOLD)        \r\n",
					"    if is_val_success :\r\n",
					"        load_store_order_users(df_store_order_item_user_mstr,BASE_ADLS_CONN_STR + TARGET_STORE_ORDER_ITEM_USER_PATH.format(opco = OPCO),OPCO)\r\n",
					"    else:\r\n",
					"        logger.error(\"\\t Failed to override master since threshold is exceding \")\r\n",
					"        raise Exception(\"EXCEEDING_THRESHOLD\")                             \r\n",
					"else:\r\n",
					"    logger.info(\"\\t First Time Master Load\")\r\n",
					"    load_store_order_users(df_store_order_item_user_mstr,BASE_ADLS_CONN_STR + TARGET_STORE_ORDER_ITEM_USER_PATH.format(opco = OPCO),OPCO)\r\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}