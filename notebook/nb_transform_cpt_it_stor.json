{
	"name": "nb_transform_cpt_it_stor",
	"properties": {
		"folder": {
			"name": "mdm/domain/merchandise/product"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsppdlinte201",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "102424a0-f6c9-4eef-a2fa-786be21664fa"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/68ab6d29-6524-4862-8fb0-8b171dcf03a9/resourceGroups/rg-synw-pdlintegrations-nonprd-dev-e2-01/providers/Microsoft.Synapse/workspaces/synw-pdlintegrations-nonprd-dev-e2-01/bigDataPools/synsppdlinte201",
				"name": "synsppdlinte201",
				"type": "Spark",
				"endpoint": "https://synw-pdlintegrations-nonprd-dev-e2-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsppdlinte201",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INITIALIZATION OF VARIABLES**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"BASE_ADLS_CONN_STR = \"abfss://data-integration@sasynwpdlintnpdeve201.dfs.core.windows.net/\"\r\n",
					"SOURCE_CPT_IT_STOR_LAKE_PATH = \"opco/ppod/domain/merch/product/retailer-cpt-it-stor/lake/2023-07-26-10-42-08/\"\r\n",
					"STAGE_CPT_IT_STOR_PATH = \"opco/{opco}/domain/merch/product/retailer-cpt-it-stor/stage/\"\r\n",
					"TARGET_CPT_IT_STOR_PATH = \"opco/{opco}/domain/merch/product/retailer-cpt-it-stor/master/\"\r\n",
					"VAL_CNT_THRESHOLD = 5\r\n",
					"KEY_COL = \"prod_id\"\r\n",
					"PARTITION_COL = \"ecom_stor_id\"\r\n",
					"OPCO_LST = [\"ppod\", \"fdln\", \"hnfd\", \"stsh\", \"gntl\", \"gntc\", \"mrtn\"]"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INCLUDE UTILS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/logging/nb_logging_util { LOGGER_NM: \"nb_transform_cpt_it_stor\", LOGGING_LEVEL: \"INFO\" }"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/validation/nb_auto_data_validation_framework"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"logger.info(\" \\033[1m****************************************************************************** \\n MDM - PRODUCT - RETAILER - CPT-IT-STOR - Starting with below parameters\\n *****************************************************************************\\033[0m\")\n",
					"logger.info(\"\\n SOURCE_CPT_IT_STOR_LAKE_PATH : {0}\".format(SOURCE_CPT_IT_STOR_LAKE_PATH))\n",
					"logger.info(\"\\n OPCO_LST : {0}\".format(OPCO_LST))\n",
					"logger.info(\"\\n VAL_CNT_THRESHOLD : {0}\".format(VAL_CNT_THRESHOLD))\n",
					"logger.info(\"\\n KEY_COL : {0}\".format(KEY_COL))\n",
					"logger.info(\"\\n PARTITION_COL : {0}\".format(PARTITION_COL))\n",
					"logger.info(\"**************************************************************************\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**STAGE DATA LOAD**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.types import StructType, StructField, IntegerType, TimestampType, DecimalType, StringType\r\n",
					"\r\n",
					"sch_merch_cpt_it_stor = StructType([\r\n",
					"    StructField(\"ecom_stor_id\", IntegerType(), False),\r\n",
					"    StructField(\"prod_id\", IntegerType(), False),\r\n",
					"    StructField(\"upc_cd\", StringType(), True),\r\n",
					"    StructField(\"pr_scal_qy\", DecimalType(7, 2), True),\r\n",
					"    StructField(\"unit_scal_qy\", DecimalType(7, 2), True),\r\n",
					"    StructField(\"prom_end_dt\", TimestampType(), True),\r\n",
					"    StructField(\"stck_on_hand_qy\", IntegerType(), True),\r\n",
					"    StructField(\"stck_avg_sold_qy\", IntegerType(), True),\r\n",
					"    StructField(\"it_shop_cd\", StringType(), True),\r\n",
					"    StructField(\"srch_cd\", StringType(), True),\r\n",
					"    StructField(\"it_purc_qy\", IntegerType(), True),\r\n",
					"    StructField(\"actv_cd\", StringType(), True),\r\n",
					"    StructField(\"actv_cd_upd_dt\", TimestampType(), True),\r\n",
					"    StructField(\"old_actv_cd\", StringType(), True),\r\n",
					"    StructField(\"sub_prod_id\", IntegerType(), True),\r\n",
					"    StructField(\"sub_qy\", IntegerType(), True),\r\n",
					"    StructField(\"uprm_actv_cd\", StringType(), False),\r\n",
					"    StructField(\"mid_tail_vend_cd\", IntegerType(), True),\r\n",
					"    StructField(\"it_long_name_tx\", StringType(), True),\r\n",
					"    StructField(\"ltmo_it_fl\", StringType(), False),\r\n",
					"    StructField(\"audt_upd_dt_tm\", TimestampType(), False),\r\n",
					"    StructField(\"audt_upd_user_id\", StringType(), False)\r\n",
					"])\r\n",
					"\r\n",
					"df_cpt_it_stor_lake = spark \\\r\n",
					"    .read \\\r\n",
					"    .format(\"parquet\") \\\r\n",
					"    .option(\"inferSchema\", \"true\") \\\r\n",
					"    .schema(sch_merch_cpt_it_stor) \\\r\n",
					"    .load(BASE_ADLS_CONN_STR + SOURCE_CPT_IT_STOR_LAKE_PATH)\r\n",
					"    \r\n",
					"logger.info(\"cpt_it_stor loaded from lake={0}, count={1}\".format(df_cpt_it_stor_lake.count(), SOURCE_CPT_IT_STOR_LAKE_PATH))\r\n",
					"\r\n",
					"df_cpt_it_stor_stg = df_cpt_it_stor_lake \\\r\n",
					"    .withColumnRenamed(\"audt_upd_dt_tm\", \"src_audt_upd_dt_tm\") \\\r\n",
					"    .withColumnRenamed(\"audt_upd_user_id\", \"src_audt_upd_user_id\") \\\r\n",
					"    .withColumn(\"tgt_audt_upd_dt_tm\", f.current_timestamp()) \\\r\n",
					"    .withColumn(\"tgt_audt_upd_user_id\", f.lit(\"mdm-data-integration\"))\r\n",
					"\r\n",
					"logger.info(\"Enriched Lake Data. count={0}\".format(df_cpt_it_stor_stg.count()))\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**MASTER DATA MANAGEMENT**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as f\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"\r\n",
					"def write_master(df_stg, opco):\r\n",
					"    df_stg \\\r\n",
					"        .repartition(1, KEY_COL) \\\r\n",
					"        .sort(KEY_COL) \\\r\n",
					"        .write \\\r\n",
					"        .format(\"delta\") \\\r\n",
					"        .mode(\"overwrite\") \\\r\n",
					"        .partitionBy(PARTITION_COL) \\\r\n",
					"        .save(BASE_ADLS_CONN_STR + TARGET_CPT_IT_STOR_PATH.format(opco = opco))\r\n",
					"    logger.info(\"\\t Master data overwritten. count={0}\".format(df_stg.count()))\r\n",
					"\r\n",
					"\r\n",
					"def init():\r\n",
					"    logger.info(\"MDM started for cpt_it_sto Products\")\r\n",
					"    \r\n",
					"    spark.conf.set(\"spark.sql.parquet.enableVectorizedReader\",\"false\")\r\n",
					"\r\n",
					"    for opco in OPCO_LST:\r\n",
					"        logger.info(\"Processing OPCO={0}\".format(opco))\r\n",
					"\r\n",
					"        if (DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_CPT_IT_STOR_PATH.format(opco = opco))):\r\n",
					"            logger.info(\"\\t Master data already exists for {0}\".format(opco))\r\n",
					"            df_cpt_it_stor_mstr = spark \\\r\n",
					"                .read \\\r\n",
					"                .format(\"delta\") \\\r\n",
					"                .load(BASE_ADLS_CONN_STR + TARGET_CPT_IT_STOR_PATH.format(opco = opco))\r\n",
					"            logger.debug(\"\\t Master data loaded for validation. count={0}\".format(df_cpt_it_stor_mstr.count()))\r\n",
					"            is_val_success = validate_count(df_cpt_it_stor_stg, df_cpt_it_stor_mstr, VAL_CNT_THRESHOLD)\r\n",
					"            if is_val_success:\r\n",
					"                write_master(df_cpt_it_stor_stg, opco)\r\n",
					"            else:\r\n",
					"                logger.error(\"\\t Failed to override master since variantion is exceding the threshold\")\r\n",
					"                raise Exception(\"EXCEEDING_CNT_THRESHOLD\")\r\n",
					"        else:\r\n",
					"            logger.info(\"\\t Processing MDM first time for {0}\".format(opco))\r\n",
					"            write_master(df_cpt_it_stor_stg, opco)\r\n",
					"    \r\n",
					"\r\n",
					"##############################\r\n",
					"# FULL LOAD\r\n",
					"##############################\r\n",
					"init()\r\n",
					""
				],
				"execution_count": 5
			}
		]
	}
}