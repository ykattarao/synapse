{
	"name": "nb_transform_web_order_item",
	"properties": {
		"folder": {
			"name": "mdm/domain/order/web-order/order-item"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsppdlinte201",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f1f7de01-c409-46e5-acb1-80fb02dbfe4e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/68ab6d29-6524-4862-8fb0-8b171dcf03a9/resourceGroups/rg-synw-pdlintegrations-nonprd-dev-e2-01/providers/Microsoft.Synapse/workspaces/synw-pdlintegrations-nonprd-dev-e2-01/bigDataPools/synsppdlinte201",
				"name": "synsppdlinte201",
				"type": "Spark",
				"endpoint": "https://synw-pdlintegrations-nonprd-dev-e2-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsppdlinte201",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INITIALIZATION OF VARIABLES**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"BASE_ADLS_CONN_STR = \"abfss://data-integration@sasynwpdlintnpdeve201.dfs.core.windows.net/\"\n",
					"STAGE_ORDER_ITEM_PATH = \"opco/fdln/domain/order/web-order/stage/order-item/\"\n",
					"TARGET_ORDER_PATH = \"opco/fdln/domain/order/web-order/master/order/\"\n",
					"TARGET_ORDER_ITEM_PATH = \"opco/fdln/domain/order/web-order/master/order-item/\"\n",
					"\n",
					"TARGET_ORDER_ITEM_COLS = [\"orderId\", \"orderDate\", \"orderTime\", \"deliveryDate\", \"deliverySlotStart\", \"deliverySlotEnd\", \"orderDescription\", \"orderStatus\", \"userId\", \"col.podId\", \"upc\", \n",
					"                        \"uom\", \"rqstQy\", \"ordQy\", \"shipQy\", \"unitPrice\", \"regPrice\", \"categoryId\", \"categoryDesc\", \"year\", \"month\", \"day\"]\n",
					"KEY_COLS = [\"userId\",\"orderId\"]\n",
					"PARTITION_COLS = [\"year\", \"month\", \"day\"]"
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INCLUDE UTILS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/logging/nb_logging_util { LOGGER_NM: \"nb_transform_web_order_item\", LOGGING_LEVEL: \"INFO\" }"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\n",
					"logger.info(\"******************************************************************************\")\n",
					"logger.info(\"\\t MDM - ORDER-ITEM - WEB_ORDER - ORDER_HISTORY - Starting with below parameters\")\n",
					"logger.info(\"******************************************************************************\")\n",
					"logger.info(\"\\t STAGE_ORDER_ITEM_PATH : {0}\".format(STAGE_ORDER_ITEM_PATH))\n",
					"logger.info(\"\\t TARGET_ORDER_PATH : {0}\".format(TARGET_ORDER_PATH))\n",
					"logger.info(\"\\t TARGET_ORDER_ITEM_PATH : {0}\".format(TARGET_ORDER_ITEM_PATH))\n",
					"logger.info(\"\\t TARGET_ORDER_ITEM_COLS : {0}\".format(TARGET_ORDER_ITEM_COLS))\n",
					"logger.info(\"\\t KEY_COLS : {0}\".format(KEY_COLS))\n",
					"logger.info(\"\\t PARTITION_COLS : {0}\".format(PARTITION_COLS))\n",
					"logger.info(\"*******************************************************************************\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**MASTER DATA MANAGEMENT - FULL LOAD**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\n",
					"from delta.tables import DeltaTable\n",
					"\n",
					"def init():\n",
					"    df_web_order_item = spark \\\n",
					"        .read \\\n",
					"        .format(\"delta\") \\\n",
					"        .load(BASE_ADLS_CONN_STR + TARGET_ORDER_PATH) \\\n",
					"        .select(\"orderId\", \"orderDate\", \"orderTime\", \"deliveryDate\", \"deliverySlotStart\", \"deliverySlotEnd\", \"orderDescription\", \"orderStatus\", \"userId\", \"year\", \"month\", \"day\", f.explode(f.col(\"items\"))) \\\n",
					"        .withColumn(\"podId\",f.col(\"col.podId\")) \\\n",
					"        .withColumn(\"upc\", f.col(\"col.primUpcCd\")) \\\n",
					"        .withColumn(\"uom\", f.col(\"col.lbEachCd\")) \\\n",
					"        .withColumn(\"rqstQy\", f.col(\"col.rqstQy\")) \\\n",
					"        .withColumn(\"ordQy\", f.col(\"col.ordQy\")) \\\n",
					"        .withColumn(\"shipQy\", f.col(\"col.shipQy\")) \\\n",
					"        .withColumn(\"unitPrice\", f.col(\"col.unitPrice\")) \\\n",
					"        .withColumn(\"regPrice\", f.col(\"col.regPrice\")) \\\n",
					"        .withColumn(\"categoryId\", f.col(\"col.categoryId\")) \\\n",
					"        .withColumn(\"categoryDesc\", f.col(\"col.categoryDesc\")) \\\n",
					"        .select(TARGET_ORDER_ITEM_COLS)\n",
					"    \n",
					"    logger.info(\"init-load: Read orders from order container. Count={0}, Path={1}\".format(df_web_order_item.count(),TARGET_ORDER_PATH))\n",
					"\n",
					"    df_web_order_item \\\n",
					"       .repartition(5, \"orderId\") \\\n",
					"       .sort(\"orderId\") \\\n",
					"       .write \\\n",
					"       .mode(\"overwrite\") \\\n",
					"       .option(\"mergeSchema\", \"true\") \\\n",
					"       .format(\"delta\") \\\n",
					"       .partitionBy(\"year\", \"month\", \"day\") \\\n",
					"       .save(BASE_ADLS_CONN_STR + TARGET_ORDER_ITEM_PATH)\n",
					"    \n",
					"    logger.info(\"init-load: Created order-item. Count={0}, Path={1}\".format(df_web_order_item.count(),TARGET_ORDER_ITEM_PATH))\n",
					"\n",
					"##############################\n",
					"# MAIN STARTS HERE\n",
					"##############################\n",
					"if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_ORDER_ITEM_PATH) == False):\n",
					"    init()\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**MASTER DATA MANAGEMENT - DELTA LOAD**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as f\n",
					"from delta.tables import DeltaTable\n",
					"\n",
					"def apply_cdc():\n",
					"    df_web_order_master = spark \\\n",
					"        .read \\\n",
					"        .format(\"delta\") \\\n",
					"        .load(BASE_ADLS_CONN_STR + TARGET_ORDER_PATH)\n",
					"\n",
					"    df_web_order_delta = spark \\\n",
					"        .read \\\n",
					"        .format(\"delta\") \\\n",
					"        .load(BASE_ADLS_CONN_STR + STAGE_ORDER_ITEM_PATH)\n",
					"    \n",
					"    logger.info(\"cdc-load: Read delta orders from stage container. Count={0}, Path={1}\".format(df_web_order_delta.count(),STAGE_ORDER_ITEM_PATH))\n",
					"\n",
					"    df_web_order_delta.createOrReplaceTempView(\"tbl_web_order_delta\")\n",
					"    df_web_order_master.createOrReplaceTempView(\"tbl_web_order_master\")\n",
					"\n",
					"    df_web_order_item_stage = spark \\\n",
					"        .sql(\n",
					"            \"\"\"\n",
					"            SELECT m.orderId\n",
					"                , m.orderDate\n",
					"                , m.orderTime\n",
					"                , m.deliveryDate\n",
					"                , m.deliverySlotStart\n",
					"                , m.deliverySlotEnd\n",
					"                , m.orderDescription\n",
					"                , m.orderStatus\n",
					"                , m.userId\n",
					"                , m.items\n",
					"                , m.year\n",
					"                , m.month\n",
					"                , m.day\n",
					"            FROM tbl_web_order_delta d\n",
					"            INNER JOIN tbl_web_order_master m\n",
					"            ON d.year = m.year\n",
					"            AND d.month = m.month\n",
					"            AND d.day = m.day\n",
					"            AND d.orderId = m.orderId\n",
					"            \"\"\") \\\n",
					"        .select(\"orderId\", \"orderDate\", \"orderTime\", \"deliveryDate\", \"deliverySlotStart\", \"deliverySlotEnd\", \"orderDescription\", \"orderStatus\", \"userId\", \"year\", \"month\", \"day\", f.explode(f.col(\"items\"))) \\\n",
					"        .withColumn(\"podId\",f.col(\"col.podId\")) \\\n",
					"        .withColumn(\"upc\", f.col(\"col.primUpcCd\")) \\\n",
					"        .withColumn(\"uom\", f.col(\"col.lbEachCd\")) \\\n",
					"        .withColumn(\"rqstQy\", f.col(\"col.rqstQy\")) \\\n",
					"        .withColumn(\"ordQy\", f.col(\"col.ordQy\")) \\\n",
					"        .withColumn(\"shipQy\", f.col(\"col.shipQy\")) \\\n",
					"        .withColumn(\"unitPrice\", f.col(\"col.unitPrice\")) \\\n",
					"        .withColumn(\"regPrice\", f.col(\"col.regPrice\")) \\\n",
					"        .withColumn(\"categoryId\", f.col(\"col.categoryId\")) \\\n",
					"        .withColumn(\"categoryDesc\", f.col(\"col.categoryDesc\")) \\\n",
					"        .select(TARGET_ORDER_ITEM_COLS)\n",
					"                \n",
					"    df_web_order_item_master = spark \\\n",
					"        .read \\\n",
					"        .format(\"delta\") \\\n",
					"        .load(BASE_ADLS_CONN_STR + TARGET_ORDER_ITEM_PATH)\n",
					"    \n",
					"    logger.info(\"cdc-load: Built order-item-stg & order-item-mstr datasets. Stage={0}, Master={1}\".format(df_web_order_item_stage.count(),df_web_order_item_master.count()))\n",
					"\n",
					"    df_web_order_item_stage.createOrReplaceTempView(\"tbl_web_order_item_stage\")\n",
					"    df_web_order_item_master.createOrReplaceTempView(\"tbl_web_order_item_master\")\n",
					"\n",
					"    spark.sql(\n",
					"        \"\"\"\n",
					"        MERGE INTO tbl_web_order_item_master\n",
					"        USING tbl_web_order_item_stage\n",
					"        ON tbl_web_order_item_master.year = tbl_web_order_item_stage.year\n",
					"        AND tbl_web_order_item_master.month = tbl_web_order_item_stage.month\n",
					"        AND tbl_web_order_item_master.day = tbl_web_order_item_stage.day\n",
					"        AND tbl_web_order_item_master.orderId = tbl_web_order_item_stage.orderId\n",
					"        AND tbl_web_order_item_master.podId = tbl_web_order_item_stage.podId\n",
					"        WHEN MATCHED THEN \n",
					"            UPDATE SET *\n",
					"        WHEN NOT MATCHED THEN\n",
					"            INSERT *\n",
					"        \"\"\"\n",
					"    )\n",
					"\n",
					"    logger.info(\"cdc-load: Merged order-item-stg -> order-item-mstr. Stage={0}, Master={1}\".format(df_web_order_item_stage.count(),df_web_order_item_master.count()))\n",
					"\n",
					"\n",
					"if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + STAGE_ORDER_ITEM_PATH)):\n",
					"    apply_cdc()\n",
					"else:\n",
					"    logger.info(\"cdc-load: No delta orders found at path = {0}\".format(STAGE_ORDER_ITEM_PATH))"
				],
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**PURGE STAGE**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import functions as f\n",
					"from delta.tables import DeltaTable\n",
					"\n",
					"if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + STAGE_ORDER_ITEM_PATH)):\n",
					"    mssparkutils.fs.rm(BASE_ADLS_CONN_STR + STAGE_ORDER_ITEM_PATH, recurse = True)\n",
					"    logger.info(\"cdc-load: Cleaned up delta data container = {0}\".format(STAGE_ORDER_ITEM_PATH))"
				],
				"execution_count": 9
			}
		]
	}
}