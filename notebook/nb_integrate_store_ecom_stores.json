{
	"name": "nb_integrate_store_ecom_stores",
	"properties": {
		"folder": {
			"name": "integration/service-location"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsppdlinte201",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a7674d40-4e53-455e-bf28-ffba2052eb61"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/68ab6d29-6524-4862-8fb0-8b171dcf03a9/resourceGroups/rg-synw-pdlintegrations-nonprd-dev-e2-01/providers/Microsoft.Synapse/workspaces/synw-pdlintegrations-nonprd-dev-e2-01/bigDataPools/synsppdlinte201",
				"name": "synsppdlinte201",
				"type": "Spark",
				"endpoint": "https://synw-pdlintegrations-nonprd-dev-e2-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsppdlinte201",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INITILIZATION OF VARIBLES**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"BASE_ADLS_CONN_STR = \"abfss://data-integration@sasynwpdlintnpdeve201.dfs.core.windows.net/\"\r\n",
					"OPCO=\"fdln\"\r\n",
					"TARGET_RTL_ECOM_STORE_CTL_PATH = \"opco/{opco}/domain/store/retailer-cpt-ecom-store-ctl/master/\"\r\n",
					"TARGET_ECOM_STORES=\"opco/{opco}/integration/service-location/ecom-stores/master\"\r\n",
					"VAL_CNT_THRESHOLD=2"
				],
				"execution_count": 134
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INCULDE UTILS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/logging/nb_logging_util { LOGGER_NM: \"nb_integrate_store_ecom_stores\", LOGGING_LEVEL: \"INFO\" }"
				],
				"execution_count": 135
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/validation/nb_auto_data_validation_framework"
				],
				"execution_count": 136
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logger.info(\"*******************************************************************\")\r\n",
					"logger.info(\"\\t STORE INTEGRATION - ECOM STORES - Starting with below parameters\")\r\n",
					"logger.info(\"*******************************************************************\")\r\n",
					"logger.info(\"\\t TARGET_RTL_ECOM_STORE_CTL_PATH : {0}\".format(TARGET_RTL_ECOM_STORE_CTL_PATH.format(opco = OPCO)))\r\n",
					"logger.info(\"\\t OPCO : {0}\".format(OPCO))\r\n",
					"logger.info(\"\\t TARGET_ECOM_STORES : {0}\".format(TARGET_ECOM_STORES))\r\n",
					"logger.info(\"\\t VAL_CNT_THRESHOLD : {0}\".format(VAL_CNT_THRESHOLD))\r\n",
					"logger.info(\"*******************************************************************\")"
				],
				"execution_count": 137
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**LOADING ECOM STORE CTL FROM MASTER**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def check_if_master_file_exists():\r\n",
					"    return DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_RTL_ECOM_STORE_CTL_PATH.format(opco = OPCO))\r\n",
					"\r\n",
					"is_master_fl_exist = check_if_master_file_exists()\r\n",
					"if is_master_fl_exist: \r\n",
					"    df_ecom_stor_ctl= spark \\\r\n",
					"                            .read \\\r\n",
					"                            .format(\"delta\") \\\r\n",
					"                            .option(\"inferSchema\", \"true\") \\\r\n",
					"                            .load(BASE_ADLS_CONN_STR + TARGET_RTL_ECOM_STORE_CTL_PATH.format(opco = OPCO))\r\n",
					"else:\r\n",
					"    logger.info(\"ecom_stor_ctl master file does not exist for OPCO={0}\".format(OPCO))\r\n",
					"    raise Exception(\"MASTER_FILE_DOES_NOT_EXIST\")  \r\n",
					"\r\n",
					"logger.info(\"\\t Data_load:  ecom_stor_ctl from master.\\n OPCO={0},\\n Count={1}\".format(OPCO,df_ecom_stor_ctl.count()))"
				],
				"execution_count": 138
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**SELECTING ECOM STORE COLUMNS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"df_ecom_stor_ctl=df_ecom_stor_ctl.select(\"src_audt_cr_dt_tm\",\r\n",
					"                                        \"src_audt_cr_id\",\r\n",
					"                                        \"src_audt_upd_dt_tm\",\r\n",
					"                                        \"src_audt_upd_id\",\r\n",
					"                                        \"brnd_ba_qy\",\r\n",
					"                                        \"cnsm_fuel_qy\",\r\n",
					"                                        \"cnsm_ord_lim_qy\",\r\n",
					"                                        \"cpn_all_spec_qy\",\r\n",
					"                                        \"cpn_ba_qy\",\r\n",
					"                                        \"cpn_cart_crs_qy\",\r\n",
					"                                        \"cpn_cart_max_qy\",\r\n",
					"                                        \"cpn_cart_qy\",\r\n",
					"                                        \"cpn_cart_wkly_qy\",\r\n",
					"                                        \"cpn_shlf_cat_qy\",\r\n",
					"                                        \"cpn_shlf_max_qy\",\r\n",
					"                                        \"cpn_vend_dc_id\",\r\n",
					"                                        \"cpn_vend_stat_cd\",\r\n",
					"                                        \"cpn_wkly_spec_qy\",\r\n",
					"                                        \"csi_actv_cd\",\r\n",
					"                                        \"dc_id\",\r\n",
					"                                        \"dpg_shlf_cat_qy\",\r\n",
					"                                        \"drvr_rvw_allw_cd\",\r\n",
					"                                        \"drvr_tip_allw_cd\",\r\n",
					"                                        \"ecom_stor_id\",\r\n",
					"                                        \"ecom_stor_name_tx\",\r\n",
					"                                        \"elec_invc_cd\",\r\n",
					"                                        \"epmt_disc_actv_cd\",\r\n",
					"                                        \"epmt_disc_qy\",\r\n",
					"                                        \"epmt_feat_actv_cd\",\r\n",
					"                                        \"epmt_time_ord_qy\",\r\n",
					"                                        \"fav_psn_tab_tx\",\r\n",
					"                                        \"fav_purc_tab_tx\",\r\n",
					"                                        \"fav_rfsh_day_qy\",\r\n",
					"                                        \"it_trk_actv_cd\",\r\n",
					"                                        \"list_it_disp_lg_qy\",\r\n",
					"                                        \"list_it_disp_sm_qy\",\r\n",
					"                                        \"load_cpn_actv_fl\",\r\n",
					"                                        \"max_days_out_qy\",\r\n",
					"                                        \"mgr_mail_tx\",\r\n",
					"                                        \"mgr_name_tx\",\r\n",
					"                                        \"mrch_fuel_qy\",\r\n",
					"                                        \"mrch_ord_lim_qy\",\r\n",
					"                                        \"new_ariv_days_qy\",\r\n",
					"                                        \"one_way_dlv_fee_qy\",\r\n",
					"                                        \"one_way_dlv_fl\",\r\n",
					"                                        \"opco_id\",\r\n",
					"                                        \"ord_stat_actv_cd\",\r\n",
					"                                        \"ord_stat_stop_qy\",\r\n",
					"                                        \"ortc_stor_fl\",\r\n",
					"                                        \"pa_actv_cd\",\r\n",
					"                                        \"pa_auth_days_qy\",\r\n",
					"                                        \"pa_cc_evry_ord_qy\",\r\n",
					"                                        \"pa_cc_init_ord_qy\",\r\n",
					"                                        \"pa_cc_ord_days_qy\",\r\n",
					"                                        \"pa_csv_req_cd\",\r\n",
					"                                        \"pa_pep_init_ord_qy\",\r\n",
					"                                        \"pma_id\",\r\n",
					"                                        \"pod_bag_fl\",\r\n",
					"                                        \"pr_exp_day_out_qy\",\r\n",
					"                                        \"pup_srch_rad_qy\",\r\n",
					"                                        \"root_menu_id\",\r\n",
					"                                        \"rte_eta_actv_cd\",\r\n",
					"                                        \"rte_eta_auth_cd\",\r\n",
					"                                        \"rtlr_card_actv_cd\",\r\n",
					"                                        \"rtlr_card_asgn_cd\",\r\n",
					"                                        \"rtlr_card_asgn_tx\",\r\n",
					"                                        \"rtlr_card_name_tx\",\r\n",
					"                                        \"rtlr_card_trk_id\",\r\n",
					"                                        \"rtlr_card_vald_tx\",\r\n",
					"                                        \"rvw_grp_cd\",\r\n",
					"                                        \"shlf_it_disp_lg_qy\",\r\n",
					"                                        \"shlf_it_disp_sm_qy\",\r\n",
					"                                        \"show_reg_pr_cd\",\r\n",
					"                                        \"snal_mail_cpn_cd\",\r\n",
					"                                        \"stag_only_fl\",\r\n",
					"                                        \"stor_stat_cd\",\r\n",
					"                                        \"stor_type_cd\",\r\n",
					"                                        \"svc_type_slct_fl\",\r\n",
					"                                        \"time_diff_qy\",\r\n",
					"                                        \"top_spec_actv_fl\",\r\n",
					"                                        \"tot_svgs_actv_cd\",\r\n",
					"                                        \"tot_svgs_disp_tx\",\r\n",
					"                                        \"unat_slot_allw_cd\",\r\n",
					"                                        \"uprm_actv_cd\",\r\n",
					"                                        \"web_domn_rtrn_tx\",\r\n",
					"                                        \"max_pers_it_qy\",\r\n",
					"                                        \"max_prev_ord_qy\",\r\n",
					"                                        \"max_pers_hdr_qy\",\r\n",
					"                                        \"stor_id\")                      "
				],
				"execution_count": 139
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**VALIDATING DATA & PERSISTING ECOM STORES**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def check_if_master_file_exists():    \r\n",
					"    return DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_ECOM_STORES.format(opco = OPCO))\r\n",
					"\r\n",
					"def load_ecom_stores(df_load,path,opco):\r\n",
					"    df_load\\\r\n",
					"            .write \\\r\n",
					"            .option(\"mergeSchema\", \"true\") \\\r\n",
					"            .mode(\"overwrite\") \\\r\n",
					"            .format(\"delta\") \\\r\n",
					"            .save(path)\r\n",
					"    logger.info(\"\\t SERVICE LOCATION: Ecom stores master data is overrided.\\n OPCO = {0},\\n Path={1},\\n Count={2}\".format(OPCO,TARGET_ECOM_STORES.format(opco = OPCO),df_load.count()))\r\n",
					"# main starts here\r\n",
					"is_master_fl_exist = check_if_master_file_exists()\r\n",
					"if is_master_fl_exist: \r\n",
					"    df_ecom_stores_master= spark \\\r\n",
					"                                .read \\\r\n",
					"                                .format(\"delta\") \\\r\n",
					"                                .load(BASE_ADLS_CONN_STR + TARGET_ECOM_STORES.format(opco = OPCO))\r\n",
					"    logger.info(\"\\t SERVICE LOCATION: Ecom stores loaded from master. OPCO = {0}, Count={1}\".format(OPCO, df_ecom_stores_master.count()))\r\n",
					"    is_val_success= validate_count(df_ecom_stores_master,df_ecom_stor_ctl,VAL_CNT_THRESHOLD)        \r\n",
					"    if is_val_success :\r\n",
					"        load_ecom_stores(df_ecom_stor_ctl,BASE_ADLS_CONN_STR + TARGET_ECOM_STORES.format(opco = OPCO), OPCO)\r\n",
					"    else:\r\n",
					"        logger.error(\"\\t Failed to override master since threshold is exceding \")\r\n",
					"        raise Exception(\"EXCEEDING_THRESHOLD\")                             \r\n",
					"else:\r\n",
					"        logger.info(\"\\t First Time Master Load\")\r\n",
					"        load_ecom_stores(df_ecom_stor_ctl,BASE_ADLS_CONN_STR + TARGET_ECOM_STORES.format(opco = OPCO), OPCO)"
				],
				"execution_count": 140
			}
		]
	}
}