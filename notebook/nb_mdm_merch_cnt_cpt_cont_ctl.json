{
	"name": "nb_mdm_merch_cnt_cpt_cont_ctl",
	"properties": {
		"folder": {
			"name": "mdm/domain/merchandise/content"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsppdlinte201",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "96926212-b243-462c-b43e-5d87cfd5f7e3"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/68ab6d29-6524-4862-8fb0-8b171dcf03a9/resourceGroups/rg-synw-pdlintegrations-nonprd-dev-e2-01/providers/Microsoft.Synapse/workspaces/synw-pdlintegrations-nonprd-dev-e2-01/bigDataPools/synsppdlinte201",
				"name": "synsppdlinte201",
				"type": "Spark",
				"endpoint": "https://synw-pdlintegrations-nonprd-dev-e2-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsppdlinte201",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INITILIZATION OF VARIBLES**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"tags": [
						"parameters"
					]
				},
				"source": [
					"BASE_ADLS_CONN_STR = \"abfss://data-integration@sasynwpdlintnpdeve201.dfs.core.windows.net/\"\r\n",
					"SOURCE_LAKE_RELATIVE_PATH = \"opco/ppod/domain/merch/content/content-cpt-cont-ctl/lake/2023-09-22-01-42-41/\"\r\n",
					"STAGE_RELATIVE_PATH  = \"opco/ppod/domain/merch/content/content-cpt-cont-ctl/stage/\"\r\n",
					"TARGET_RELATIVE_PATH  = \"opco/{opco}/domain/merch/content/content-cpt-cont-ctl/master/\"\r\n",
					"KEY_COL=\"cont_id\"\r\n",
					"PARTITION_COL = \"hash\"\r\n",
					"NO_OF_PARTITIONS = 25\r\n",
					"VAL_CNT_THRESHOLD = 2\r\n",
					"IS_DELTA = False\r\n",
					"OPCO_LST = [\"ppod\", \"fdln\", \"hnfd\", \"stsh\", \"gntl\", \"gntc\", \"mrtn\"]\r\n",
					"PARAM_MERCH_PRODUCT = \"usr-data-integration\""
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INCLUDE UTILS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/logging/nb_logging_util { LOGGER_NM: \"nb_mdm_merch_cnt_cpt_cont_ctl\", LOGGING_LEVEL: \"INFO\" }"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/validation/nb_auto_data_validation_framework"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logger.info(\"**************************************************************************\")\r\n",
					"logger.info(\"\\t MDM - MERCH - CONTENT - CPT_CONT_CTL - Starting with below parameters\")\r\n",
					"logger.info(\"*************************************************************************\")\r\n",
					"logger.info(\"\\t SOURCE_LAKE_RELATIVE_PATH : {0}\".format(SOURCE_LAKE_RELATIVE_PATH))\r\n",
					"logger.info(\"\\t STAGE_RELATIVE_PATH : {0}\".format(STAGE_RELATIVE_PATH))\r\n",
					"logger.info(\"\\t TARGET_RELATIVE_PATH : {0}\".format(TARGET_RELATIVE_PATH))\r\n",
					"logger.info(\"\\t OPCO_LST : {0}\".format(OPCO_LST))\r\n",
					"logger.info(\"\\t NO_OF_PARTITIONS : {0}\".format(NO_OF_PARTITIONS))\r\n",
					"logger.info(\"\\t IS_DELTA : {0}\".format(IS_DELTA))\r\n",
					"logger.info(\"\\t KEY_COL : {0}\".format(KEY_COL))\r\n",
					"logger.info(\"\\t VAL_CNT_THRESHOLD : {0}\".format(VAL_CNT_THRESHOLD))\r\n",
					"logger.info(\"**************************************************************************\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**STAGE SCHEMA DEFINITION**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, IntegerType ,StringType \r\n",
					"\r\n",
					"STAGE_CNT_CPT_CONT_CTL_SCHEMA = StructType([\r\n",
					"        StructField(\"file_name_tx\", StringType(), False),\r\n",
					"        StructField(\"cont_id\", IntegerType(), False),\r\n",
					"        StructField(\"file_ext_cd\", StringType(), True),\r\n",
					"        StructField(\"cont_desc_tx\", StringType(), True),\r\n",
					"        StructField(\"vndr_cd\", StringType(), True),\r\n",
					"        StructField(\"audt_cr_id\", StringType(), False),\r\n",
					"        StructField(\"audt_cr_dt\", StringType(), False),\r\n",
					"        StructField(\"audt_upd_id\", StringType(), False),\r\n",
					"        StructField(\"audt_upd_dt\", StringType(), False)\r\n",
					"])\r\n",
					"\r\n",
					"logger.debug(\"schema-defination : Defined the schema for CONTENT:CPT_CONT_CTL.\\n {0}\".format(STAGE_CNT_CPT_CONT_CTL_SCHEMA))"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**CPT CONT CTL STAGE LOAD**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import current_timestamp, lit\r\n",
					"from pyspark.sql import functions as f\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + STAGE_RELATIVE_PATH)):\r\n",
					"    mssparkutils.fs.rm(BASE_ADLS_CONN_STR + STAGE_RELATIVE_PATH, recurse = True)\r\n",
					"    logger.info(\"Purging data from STG container {0}\".format(STAGE_RELATIVE_PATH))\r\n",
					"\r\n",
					"df_cpt_cont_ctl_stage = spark \\\r\n",
					"    .read \\\r\n",
					"    .format(\"parquet\") \\\r\n",
					"    .schema(STAGE_CNT_CPT_CONT_CTL_SCHEMA) \\\r\n",
					"    .option(\"inferSchema\", \"true\") \\\r\n",
					"    .load(BASE_ADLS_CONN_STR + SOURCE_LAKE_RELATIVE_PATH) \\\r\n",
					"    .filter(\"cont_id is NOT NULL\") \\\r\n",
					"    .withColumn(\"hash\", f.abs(f.hash(f.col(\"cont_id\"))%NO_OF_PARTITIONS)) \\\r\n",
					"    .withColumnRenamed(\"audt_cr_dt\", \"src_audt_cr_dt\") \\\r\n",
					"    .withColumnRenamed(\"audt_cr_id\", \"src_audt_cr_id\") \\\r\n",
					"    .withColumnRenamed(\"audt_upd_dt\", \"src_audt_upd_dt\") \\\r\n",
					"    .withColumnRenamed(\"audt_upd_id\", \"src_audt_upd_id\") \\\r\n",
					"    .withColumn(\"tgt_audt_cr_dt_tm\", current_timestamp()) \\\r\n",
					"    .withColumn(\"tgt_audt_upd_dt_tm\", current_timestamp()) \\\r\n",
					"    .withColumn(\"tgt_audt_cr_id\", lit(PARAM_MERCH_PRODUCT)) \\\r\n",
					"    .withColumn(\"tgt_audt_upd_id\", lit(PARAM_MERCH_PRODUCT)) \r\n",
					"\r\n",
					"str_cols=[colname for colname,coltype in df_cpt_cont_ctl_stage.dtypes if coltype==\"string\"] \r\n",
					"for colname in str_cols:    \r\n",
					"    df_cpt_cont_ctl_stage=df_cpt_cont_ctl_stage.withColumn(colname, f.trim(f.col(colname)))\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"df_cpt_cont_ctl_stage\\\r\n",
					"    .repartition(1, KEY_COL) \\\r\n",
					"    .sort(KEY_COL) \\\r\n",
					"    .write \\\r\n",
					"    .format(\"delta\") \\\r\n",
					"    .mode(\"overwrite\") \\\r\n",
					"    .partitionBy(PARTITION_COL) \\\r\n",
					"    .save(BASE_ADLS_CONN_STR + STAGE_RELATIVE_PATH)\r\n",
					"\r\n",
					"logger.info(\"stg-load: Created STG data from lake source. \\n LAKE = {0} \\n STG = {1} \\n CNT = {2}\".format(SOURCE_LAKE_RELATIVE_PATH, STAGE_RELATIVE_PATH, df_cpt_cont_ctl_stage.count()))\r\n",
					""
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**MASTER DATA MANAGEMENT**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.functions import count_distinct, col\r\n",
					"\r\n",
					"def load_master_data(df_stage, path, opco):\r\n",
					"    df_stage\\\r\n",
					"        .repartition(1, KEY_COL) \\\r\n",
					"        .sort(KEY_COL) \\\r\n",
					"        .write \\\r\n",
					"        .option(\"mergeSchema\", \"True\") \\\r\n",
					"        .mode(\"overwrite\") \\\r\n",
					"        .format(\"delta\") \\\r\n",
					"        .partitionBy(PARTITION_COL) \\\r\n",
					"        .save(path)\r\n",
					"    logger.info(\"CONTENT:CPT_CONT_CTL Master data overwritten.OPCO = {0}, Count={1}\".format(opco, df_stage.count()))\r\n",
					"\r\n",
					"def init(opco):\r\n",
					"    if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))):\r\n",
					"        df_cpt_cont_ctl_master= spark \\\r\n",
					"            .read \\\r\n",
					"            .format(\"delta\") \\\r\n",
					"            .load(BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))\r\n",
					"        logger.info(\"CONTENT:CPT_CONT_CTL loaded from master. OPCO = {0}, Count={1}\".format(opco, df_cpt_cont_ctl_master.count()))\r\n",
					"        is_val_success= validate_count(df_cpt_cont_ctl_master,df_cpt_cont_ctl_stage,VAL_CNT_THRESHOLD)\r\n",
					"        if (is_val_success): \r\n",
					"            load_master_data(df_cpt_cont_ctl_stage,BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco), opco)\r\n",
					"        else:\r\n",
					"            logger.error(\"\\t Failed to override master since threshold is exceding \")\r\n",
					"            raise Exception(\"EXCEEDING_THRESHOLD\")        \r\n",
					"    else:\r\n",
					"        load_master_data(df_cpt_cont_ctl_stage,BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco), opco)\r\n",
					"\r\n",
					"def apply_cdc(opco):\r\n",
					"    if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))):\r\n",
					"        \r\n",
					"        dt_cpt_cont_ctl_master = DeltaTable.forPath(spark, BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))\r\n",
					"        logger.info(\"\\t CONTENT:CPT_CONT_CTL loaded from master. OPCO = {0}, Count={1}\".format(opco, dt_cpt_cont_ctl_master.toDF().count()))\r\n",
					"\r\n",
					"        dt_cpt_cont_ctl_master.alias(\"mstr\") \\\r\n",
					"        .merge(df_cpt_cont_ctl_stage.alias(\"stg\"), \"mstr.hash = stg.hash AND mstr.cont_id = stg.cont_id\") \\\r\n",
					"        .whenMatchedUpdateAll() \\\r\n",
					"        .whenNotMatchedInsertAll() \\\r\n",
					"        .execute()\r\n",
					"    \r\n",
					"        logger.info(\"\\t CONTENT:CPT_CONT_CTL merged delta records to main file.  OPCO = {0}, \\nMaster_Count={1}, \\nDelta_Count={2},\\n Path={3}\".format(opco,dt_cpt_cont_ctl_master.toDF().count(), df_cpt_cont_ctl_stage.count(),TARGET_RELATIVE_PATH.format(opco = opco)))\r\n",
					"    else:\r\n",
					"        init(opco)\r\n",
					"    \r\n",
					"\r\n",
					"##############################\r\n",
					"\r\n",
					"# FULL LOAD / DELTA LOAD\r\n",
					"\r\n",
					"##############################\r\n",
					"for opco in OPCO_LST:\r\n",
					"    logger.info(\"Processing  MDM for CONTENT:CPT_CONT_CTL OPCO={0}, IS_DELTA={1}\".format(opco,IS_DELTA))\r\n",
					"    if(IS_DELTA):\r\n",
					"       apply_cdc(opco)        \r\n",
					"    else:\r\n",
					"       init(opco)\r\n",
					"        \r\n",
					""
				],
				"execution_count": 13
			}
		]
	}
}