{
	"name": "nb_mdm_merch_ctlg_omt_syn_srch",
	"properties": {
		"folder": {
			"name": "mdm/domain/merchandise/catalog"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synsppdlinte201",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "42d0b812-fe20-4c1b-ad6b-6c140d6a4fe9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/68ab6d29-6524-4862-8fb0-8b171dcf03a9/resourceGroups/rg-synw-pdlintegrations-nonprd-dev-e2-01/providers/Microsoft.Synapse/workspaces/synw-pdlintegrations-nonprd-dev-e2-01/bigDataPools/synsppdlinte201",
				"name": "synsppdlinte201",
				"type": "Spark",
				"endpoint": "https://synw-pdlintegrations-nonprd-dev-e2-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synsppdlinte201",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INITIALIZATION OF VARIABLES**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"BASE_ADLS_CONN_STR = \"abfss://data-integration@sasynwpdlintnpdeve201.dfs.core.windows.net/\"\r\n",
					"SOURCE_LAKE_RELATIVE_PATH = \"opco/ppod/domain/merch/catalog/omt-syn-srch/lake/2023-09-15-12-22-37/\"\r\n",
					"IS_DELTA = False\r\n",
					"STAGE_RELATIVE_PATH = \"opco/ppod/domain/merch/catalog/omt-syn-srch/stage/\"\r\n",
					"TARGET_RELATIVE_PATH = \"opco/{opco}/domain/merch/catalog/omt-syn-srch/master/\"\r\n",
					"KEY_COL=\"syn_srch_id\"\r\n",
					"OPCO_LST = [\"ppod\", \"fdln\", \"hnfd\", \"stsh\", \"gntl\", \"gntc\", \"mrtn\"]\r\n",
					"PARAM_MERCH_PRODUCT=\"usr-data-integration\"\r\n",
					"VAL_CNT_THRESHOLD=2"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**INCLUDE UTILS**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/logging/nb_logging_util { LOGGER_NM: \"nb_mdm_merch_ctlg_omt_syn_srch\", LOGGING_LEVEL: \"INFO\" }"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"%run utils/validation/nb_auto_data_validation_framework"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"logger.info(\"****************************************************************\")\r\n",
					"logger.info(\"\\t MDM - CATALOG- OMT_SYN_SRCH - Starting with below parameters\")\r\n",
					"logger.info(\"****************************************************************\")\r\n",
					"logger.info(\"\\t SOURCE_LAKE_RELATIVE_PATH : {0}\".format(SOURCE_LAKE_RELATIVE_PATH))\r\n",
					"logger.info(\"\\t STAGE_RELATIVE_PATH : {0}\".format(STAGE_RELATIVE_PATH))\r\n",
					"logger.info(\"\\t TARGET_RELATIVE_PATH : {0}\".format(TARGET_RELATIVE_PATH))\r\n",
					"logger.info(\"\\t OPCO_LST : {0}\".format(OPCO_LST))\r\n",
					"logger.info(\"\\t IS_DELTA : {0}\".format(IS_DELTA))\r\n",
					"logger.info(\"\\t KEY_COL : {0}\".format(KEY_COL))\r\n",
					"logger.info(\"\\t VAL_CNT_THRESHOLD : {0}\".format(VAL_CNT_THRESHOLD))\r\n",
					"logger.info(\"******************************************************************\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**STAGE SCHEMA DEFINITION**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, DoubleType, StringType,TimestampType, IntegerType, LongType, DecimalType, BooleanType, DateType, ArrayType\r\n",
					"\r\n",
					"STAGE_CATALOG_OMT_SYN_SRCH_SCHEMA = StructType([\r\n",
					"    StructField(\"syn_srch_id\", LongType(), False),\r\n",
					"    StructField(\"prim_tx\", StringType(), False),\r\n",
					"    StructField(\"syn_tx\", StringType(), False),\r\n",
					"    StructField(\"audt_cr_dt_tm\", TimestampType(), False),\r\n",
					"    StructField(\"audt_cr_user_cd\", StringType(), False),\r\n",
					"    StructField(\"audt_upd_dt_tm\", TimestampType(), True),\r\n",
					"    StructField(\"audt_upd_user_cd\", StringType(), False)\r\n",
					"])\r\n",
					"\r\n",
					"logger.debug(\"\\t schema-defination : Defined the schema for CATALOG:OMT_SYN_SRCH.\\n {0}\".format(STAGE_CATALOG_OMT_SYN_SRCH_SCHEMA))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**OMT SYN SRCH STAGE LOAD**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.functions import current_timestamp,lit\r\n",
					"from pyspark.sql import functions as f\r\n",
					"\r\n",
					" \r\n",
					"if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + STAGE_RELATIVE_PATH )):\r\n",
					"        mssparkutils.fs.rm(BASE_ADLS_CONN_STR + STAGE_RELATIVE_PATH , recurse = True)\r\n",
					"        logger.info(\"Purging data from STG container {0}\".format(STAGE_RELATIVE_PATH))\r\n",
					"\r\n",
					"\r\n",
					"df_catalog_omt_syn_srch_stage = spark \\\r\n",
					"                .read \\\r\n",
					"                .format(\"parquet\") \\\r\n",
					"                .schema(STAGE_CATALOG_OMT_SYN_SRCH_SCHEMA) \\\r\n",
					"                .option(\"inferSchema\", \"true\") \\\r\n",
					"                .load(BASE_ADLS_CONN_STR + SOURCE_LAKE_RELATIVE_PATH ) \\\r\n",
					"                .withColumnRenamed(\"audt_cr_dt_tm\", \"src_audt_cr_dt_tm\") \\\r\n",
					"                .withColumnRenamed(\"audt_cr_user_cd\", \"src_audt_cr_user_cd\") \\\r\n",
					"                .withColumnRenamed(\"audt_upd_dt_tm\", \"src_audt_upd_dt_tm\") \\\r\n",
					"                .withColumnRenamed(\"audt_upd_user_cd\", \"src_audt_upd_user_cd\") \\\r\n",
					"                .withColumn(\"tgt_audt_cr_dt_tm\", current_timestamp()) \\\r\n",
					"                .withColumn(\"tgt_audt_upd_dt_tm\", current_timestamp()) \\\r\n",
					"                .withColumn(\"tgt_audt_cr_user_cd\", lit(PARAM_MERCH_PRODUCT)) \\\r\n",
					"                .withColumn(\"tgt_audt_upd_user_cd\", lit(PARAM_MERCH_PRODUCT))\r\n",
					"\r\n",
					"str_cols=[colname for colname,coltype in df_catalog_omt_syn_srch_stage.dtypes if coltype==\"string\"] \r\n",
					"for colname in str_cols:    \r\n",
					"    df_catalog_omt_syn_srch_stage=df_catalog_omt_syn_srch_stage.withColumn(colname, f.trim(f.col(colname)))\r\n",
					"\r\n",
					"df_catalog_omt_syn_srch_stage \\\r\n",
					"        .sort(KEY_COL) \\\r\n",
					"        .write \\\r\n",
					"        .format(\"delta\") \\\r\n",
					"        .mode(\"overwrite\") \\\r\n",
					"        .save(BASE_ADLS_CONN_STR + STAGE_RELATIVE_PATH )\r\n",
					"logger.info(\"\\t stg-load: Created STG data from lake source. \\n LAKE = {0} \\n STG = {1} \\n CNT = {2}\".format(SOURCE_LAKE_RELATIVE_PATH, STAGE_RELATIVE_PATH, df_catalog_omt_syn_srch_stage.count()))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"**MASTER DATA MANAGEMENT**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.functions import count_distinct, col\r\n",
					"\r\n",
					"\r\n",
					"def load_master_data(df_stage, path, opco):\r\n",
					"    df_stage\\\r\n",
					"            .sort(KEY_COL) \\\r\n",
					"            .write \\\r\n",
					"            .option(\"mergeSchema\", \"True\") \\\r\n",
					"            .mode(\"overwrite\") \\\r\n",
					"            .format(\"delta\") \\\r\n",
					"            .save(path)\r\n",
					"    logger.info(\"\\t   CATALOG:OMT_SYN_SRCH Master data written. OPCO = {0}, Count={1}\".format(opco, df_stage.count()))\r\n",
					"\r\n",
					"\r\n",
					"def init(opco):\r\n",
					"    if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))):\r\n",
					"        df_catalog_omt_syn_srch_master= spark \\\r\n",
					"            .read \\\r\n",
					"            .format(\"delta\") \\\r\n",
					"            .load(BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))\r\n",
					"        logger.info(\"\\t CATALOG:OMT_SYN_SRCH loaded from master. OPCO = {0}, Count={1}\".format(opco, df_catalog_omt_syn_srch_master.count()))\r\n",
					"        is_val_success= validate_count(df_catalog_omt_syn_srch_master,df_catalog_omt_syn_srch_stage,VAL_CNT_THRESHOLD)        \r\n",
					"        if is_val_success :\r\n",
					"            load_master_data(df_catalog_omt_syn_srch_stage,BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco), opco)\r\n",
					"        else:\r\n",
					"            logger.error(\"\\t Failed to override master since threshold is exceding \")\r\n",
					"            raise Exception(\"EXCEEDING_THRESHOLD\")        \r\n",
					"    else:\r\n",
					"        logger.info(\"\\t First Time Master Load\")\r\n",
					"        load_master_data(df_catalog_omt_syn_srch_stage,BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco), opco)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def apply_cdc(opco):   \r\n",
					"    if(DeltaTable.isDeltaTable(spark, BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))):\r\n",
					"        dt_catalog_omt_syn_srch_master = DeltaTable.forPath(spark, BASE_ADLS_CONN_STR + TARGET_RELATIVE_PATH.format(opco = opco))\r\n",
					"        logger.info(\"\\t  CATALOG:OMT_SYN_SRCH loaded from master. OPCO = {0}, Count={1}\".format(opco, dt_catalog_omt_syn_srch_master.toDF().count()))\r\n",
					"\r\n",
					"        dt_catalog_omt_syn_srch_master.alias(\"mstr\") \\\r\n",
					"        .merge(df_catalog_omt_syn_srch_stage.alias(\"stg\"), \"mstr.syn_srch_id = stg.syn_srch_id \") \\\r\n",
					"        .whenMatchedUpdateAll() \\\r\n",
					"        .whenNotMatchedInsertAll() \\\r\n",
					"        .execute()\r\n",
					"        logger.info(\"\\t  CATALOG:OMT_SYN_SRCH merged delta records to main file.\\nOPCO = {0}, \\nMaster_Count={1}, \\nDelta_Count={2},\\n Path={3}\".format(opco,dt_catalog_omt_syn_srch_master.toDF().count(), df_catalog_omt_syn_srch_stage.count(),TARGET_RELATIVE_PATH.format(opco = opco)))\r\n",
					"    else:\r\n",
					"        init(opco)\r\n",
					"\r\n",
					"##########################\r\n",
					"\r\n",
					"# FULL LOAD / DELTA LOAD #\r\n",
					"\r\n",
					"##########################\r\n",
					"for opco in OPCO_LST:\r\n",
					"    logger.info(\"Processing  MDM for  CATALOG:OMT_SYN_SRCH. OPCO={0} ,IS_DELTA={1}\".format(opco,IS_DELTA))\r\n",
					"    if IS_DELTA:\r\n",
					"       apply_cdc(opco)        \r\n",
					"    else:\r\n",
					"       init(opco)\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}