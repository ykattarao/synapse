{
	"name": "pl_build_domain_generic",
	"properties": {
		"activities": [
			{
				"name": "get-pipeline-config",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "set-ingest-load-date",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:30:00",
					"retry": 3,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzurePostgreSqlSource",
						"query": {
							"value": "@if(empty(pipeline().parameters.PARAM_PIPELINE_NAME),if(and(empty(pipeline().parameters.PARAM_DOMAIN),empty(pipeline().parameters.PARAM_SUB_DOMAIN) ),\nconcat('SELECT\n    domain,\n    sub_domain,\n    pipeline_type,\n    pipeline_name,\n    opco_id,\n    parameters,\n    mappings\nFROM config.pipeline_config'),if(empty(pipeline().parameters.PARAM_SUB_DOMAIN),concat('SELECT\n    domain,\n    sub_domain,\n    pipeline_type,\n    pipeline_name,\n    opco_id,\n    parameters,\n    mappings\nFROM config.pipeline_config where domain = ','''',pipeline().parameters.PARAM_DOMAIN, ''''),concat('SELECT\n    domain,\n    sub_domain,\n    pipeline_type,\n    pipeline_name,\n    opco_id,\n    parameters,\n    mappings\nFROM config.pipeline_config where domain = ','''',pipeline().parameters.PARAM_DOMAIN, '''','and sub_domain =','''',pipeline().parameters.PARAM_SUB_DOMAIN, '''')))\n,concat('SELECT\n    domain,\n    sub_domain,\n    pipeline_type,\n    pipeline_name,\n    opco_id,\n    parameters,\n    mappings\nFROM config.pipeline_config where pipeline_name = ','''',pipeline().parameters.PARAM_PIPELINE_NAME, ''''))",
							"type": "Expression"
						},
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_az_postgres_synapse_config",
						"type": "DatasetReference",
						"parameters": {
							"SCHEMA_NAME": {
								"value": "@pipeline().parameters.PARAM_CONFIG_SCHEMA_NAME",
								"type": "Expression"
							},
							"TABLE_NAME": {
								"value": "@pipeline().parameters.PARAM_CONFIG_TABLE_NAME",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "activity-each-pipeline",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "get-pipeline-config",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get-pipeline-config').output.value",
						"type": "Expression"
					},
					"batchCount": 10,
					"activities": [
						{
							"name": "lkp-btch-cntrl",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(json(item().parameters).deltaFlag,'Y')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "lkp-btch-ctrl-dt",
										"type": "Lookup",
										"dependsOn": [],
										"policy": {
											"timeout": "0.00:30:00",
											"retry": 3,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"dataset": {
												"referenceName": "ds_az_adls_cntrl_fl_latest",
												"type": "DatasetReference",
												"parameters": {
													"PARAM_OPCO": {
														"value": "@json(item().parameters).opcoName",
														"type": "Expression"
													},
													"PARAM_DOMAIN": {
														"value": "@json(item().parameters).domainPath",
														"type": "Expression"
													}
												}
											}
										}
									},
									{
										"name": "set-prev-ingest-start-tmstmp",
										"type": "SetVariable",
										"dependsOn": [
											{
												"activity": "lkp-btch-ctrl-dt",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "VAR_INGEST_PREV_START_TMSTMP",
											"value": {
												"value": "@activity('lkp-btch-ctrl-dt').output.firstRow.Prop_0",
												"type": "Expression"
											}
										}
									}
								]
							}
						},
						{
							"name": "mdm",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "ingest",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(variables('VAR_INGEST_COUNT'),0)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "mdm-generic",
										"type": "SynapseNotebook",
										"dependsOn": [],
										"policy": {
											"timeout": "0.01:00:00",
											"retry": 3,
											"retryIntervalInSeconds": 60,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"notebook": {
												"referenceName": {
													"value": "@json(item().parameters).mdmName",
													"type": "Expression"
												},
												"type": "NotebookReference"
											},
											"parameters": {
												"BASE_ADLS_CONN_STR": {
													"value": {
														"value": "@json(item().parameters).baseADLSPath",
														"type": "Expression"
													},
													"type": "string"
												},
												"KEY_COL": {
													"value": {
														"value": "@json(item().parameters).keyColumnName",
														"type": "Expression"
													},
													"type": "string"
												},
												"VAL_CNT_THRESHOLD": {
													"value": {
														"value": "@json(item().parameters).countThreshold",
														"type": "Expression"
													},
													"type": "int"
												},
												"VAL_COL_CNT_THRESHOLD": {
													"value": {
														"value": "@json(item().parameters).columnCountThreshold",
														"type": "Expression"
													},
													"type": "int"
												},
												"VAL_COLS": {
													"value": {
														"value": "@string(json(item().parameters).columnList)",
														"type": "Expression"
													},
													"type": "string"
												},
												"IS_DELTA": {
													"value": {
														"value": "@json(item().parameters).isDelta",
														"type": "Expression"
													},
													"type": "bool"
												},
												"SOURCE_LAKE_RELATIVE_PATH": {
													"value": {
														"value": "opco/@{toLower(json(item().parameters).opcoName)}/domain/@{toLower(json(item().parameters).domainPath)}/lake/@{variables('VAR_LOAD_DT')}/",
														"type": "Expression"
													},
													"type": "string"
												},
												"NOTEBOOK_NAME": {
													"value": {
														"value": "@json(item().parameters).mdmName",
														"type": "Expression"
													},
													"type": "string"
												},
												"PARAM_NO_OF_PARTITIONS": {
													"value": {
														"value": "@json(item().parameters).noofPartitions",
														"type": "Expression"
													},
													"type": "int"
												}
											},
											"snapshot": true,
											"sparkPool": {
												"referenceName": "synsppdlinte201",
												"type": "BigDataPoolReference"
											},
											"executorSize": "Small",
											"conf": {
												"spark.dynamicAllocation.enabled": false
											},
											"driverSize": "Small"
										}
									}
								]
							}
						},
						{
							"name": "update-btch-ctrl",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "mdm",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(json(item().parameters).deltaFlag,'Y')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "update-batch-cntrl",
										"type": "ExecutePipeline",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"pipeline": {
												"referenceName": "pl_update_btch_cntrl_fl",
												"type": "PipelineReference"
											},
											"waitOnCompletion": false,
											"parameters": {
												"START_TIME": {
													"value": "@variables('VAR_INGEST_START_TMSTMP')",
													"type": "Expression"
												},
												"END_TIME": {
													"value": "@variables('VAR_INGEST_END_TMSTMP')",
													"type": "Expression"
												},
												"RECORD_COUNT": {
													"value": "@variables('VAR_INGEST_COUNT')",
													"type": "Expression"
												},
												"STATUS": {
													"value": "@variables('VAR_INGEST_STATUS')",
													"type": "Expression"
												},
												"PARAM_OPCO": {
													"value": "@{toLower(json(item().parameters).opcoName)}",
													"type": "Expression"
												},
												"PARAM_DOMAIN": {
													"value": "@{toLower(item().domain)}",
													"type": "Expression"
												}
											}
										}
									}
								]
							}
						},
						{
							"name": "ingest",
							"type": "Switch",
							"dependsOn": [
								{
									"activity": "lkp-btch-cntrl",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@toUpper(json(item().parameters).dbType)",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "INFORMIX",
										"activities": [
											{
												"name": "ingest-generic-informix",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "InformixSource",
														"query": {
															"value": "@if(json(item().parameters).isDelta,\nconcat(json(item().parameters).query,if(contains(toLower(json(item().parameters).query),'audt_cr_dt_tm'),concat('\n         where (audt_cr_dt_tm >=   DATETIME(' ,formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'yyyy-MM-dd HH:mm:ss'),') YEAR TO  SECOND  OR  audt_upd_dt_tm >=   DATETIME(',\n                    formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'yyyy-MM-dd HH:mm:ss'),') YEAR TO  SECOND )'),concat(' WHERE (audt_cr_dt >= ''',formatDateTime(formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'MM-dd-yyyy'),'MM-dd-yyyy')\n                    ,'''',' OR ',\n                    'audt_upd_dt >= ''',formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'MM-dd-yyyy'),''')'))),\n            json(item().parameters).query)\n\n\n            ",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"value": "@item().mappings",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "ds_qts_infomix_merch_product_domain",
														"type": "DatasetReference",
														"parameters": {
															"IFX_DB_NM": {
																"value": "@json(item().parameters).dbName",
																"type": "Expression"
															},
															"IFX_TBL_NM": {
																"value": "@json(item().parameters).tableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_az_adls_merch_product_domain",
														"type": "DatasetReference",
														"parameters": {
															"PARAM_INGST_FLDR_PATH": {
																"value": "opco/@{toLower(json(item().Parameters).opcoName)}/domain/@{toLower(json(item().Parameters).domainPath)}/lake/@{variables('VAR_LOAD_DT')}/",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "set-ingest-rec-count-informix",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-informix",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_COUNT",
													"value": {
														"value": "@activity('ingest-generic-informix').output.rowsCopied",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-ingest-start-tmstmp-informix",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-informix",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_START_TMSTMP",
													"value": {
														"value": "@convertFromUtc(activity('ingest-generic-informix').ExecutionStartTime,'Central Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-ingest-end-tmstmp-informix",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-informix",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_END_TMSTMP",
													"value": {
														"value": "@convertFromUtc(activity('ingest-generic-informix').ExecutionEndTime,'Central Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-ingest-status-informix",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-informix",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_STATUS",
													"value": {
														"value": "@toUpper(activity('ingest-generic-informix').status)",
														"type": "Expression"
													}
												}
											}
										]
									},
									{
										"value": "MYSQL",
										"activities": [
											{
												"name": "set-ingest-rec-count-mysql",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-mysql",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_COUNT",
													"value": {
														"value": "@activity('ingest-generic-mysql').output.rowsCopied",
														"type": "Expression"
													}
												}
											},
											{
												"name": "ingest-generic-mysql",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 3,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "MySqlSource",
														"query": {
															"value": "@if(json(item().parameters).isDelta,\nconcat(json(item().parameters).query,if(contains(toLower(json(item().parameters).query),'audt_cr_dt_tm'),concat('\n         where (audt_cr_dt_tm >=   DATETIME(' ,formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'yyyy-MM-dd HH:mm:ss'),') YEAR TO  SECOND  OR  audt_upd_dt_tm >=   DATETIME(',\n                    formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'yyyy-MM-dd HH:mm:ss'),') YEAR TO  SECOND )'),concat(' WHERE (audt_cr_dt >= ''',formatDateTime(formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'MM-dd-yyyy'),'MM-dd-yyyy')\n                    ,'''',' OR ',\n                    'audt_upd_dt >= ''',formatDateTime(variables('VAR_INGEST_PREV_START_TMSTMP'),'MM-dd-yyyy'),''')'))),\n            json(item().parameters).query)\n\n\n            ",
															"type": "Expression"
														}
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false,
													"translator": {
														"value": "@item().mappings",
														"type": "Expression"
													}
												},
												"inputs": [
													{
														"referenceName": "ds_qts_mysql_merch_prod_catalog_domain",
														"type": "DatasetReference",
														"parameters": {
															"PARAM_MYSQL_DB_NM": {
																"value": "@json(item().parameters).dbName",
																"type": "Expression"
															},
															"PARAM_MYSQL_TB_NM": {
																"value": "@json(item().parameters).tableName",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_az_adls_merch_product_domain",
														"type": "DatasetReference",
														"parameters": {
															"PARAM_INGST_FLDR_PATH": {
																"value": "opco/@{toLower(json(item().parameters).opcoName)}/domain/@{toLower(json(item().parameters).domainPath)}/lake/@{variables('VAR_LOAD_DT')}/",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "set-ingest-start-tmstmp-mysql",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-mysql",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_START_TMSTMP",
													"value": {
														"value": "@convertFromUtc(activity('ingest-generic-mysql').ExecutionStartTime,'Central Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-ingest-end-tmstmp-mysql",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-mysql",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_END_TMSTMP",
													"value": {
														"value": "@convertFromUtc(activity('ingest-generic-mysql').ExecutionEndTime,'Central Standard Time')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "set-ingest-status-mysql",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "ingest-generic-mysql",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "VAR_INGEST_STATUS",
													"value": {
														"value": "@toUpper(activity('ingest-generic-mysql').status)",
														"type": "Expression"
													}
												}
											}
										]
									}
								],
								"defaultActivities": [
									{
										"name": "fail-no-db-type",
										"type": "Fail",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"message": "Database Type Should Not Be Empty",
											"errorCode": "DB_TYPE_NOT_EMPTY"
										}
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "set-ingest-load-date",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "VAR_LOAD_DT",
					"value": {
						"value": "@formatDateTime(convertFromUtc(utcNow(),'Central Standard Time'), 'yyyy-MM-dd-hh-mm-ss')",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"PARAM_PIPELINE_NAME": {
				"type": "string"
			},
			"PARAM_CONFIG_SCHEMA_NAME": {
				"type": "string",
				"defaultValue": "config"
			},
			"PARAM_CONFIG_TABLE_NAME": {
				"type": "string",
				"defaultValue": "pipeline_config"
			},
			"PARAM_DOMAIN": {
				"type": "string"
			},
			"PARAM_SUB_DOMAIN": {
				"type": "string"
			}
		},
		"variables": {
			"VAR_LOAD_DT": {
				"type": "String"
			},
			"VAR_INGEST_COUNT": {
				"type": "Integer"
			},
			"VAR_INGEST_PREV_START_TMSTMP": {
				"type": "String"
			},
			"VAR_INGEST_START_TMSTMP": {
				"type": "String"
			},
			"VAR_INGEST_END_TMSTMP": {
				"type": "String"
			},
			"VAR_INGEST_STATUS": {
				"type": "String"
			}
		},
		"folder": {
			"name": "domain/merchandise/product"
		},
		"annotations": []
	}
}