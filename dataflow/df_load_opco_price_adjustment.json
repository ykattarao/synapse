{
	"name": "df_load_opco_price_adjustment",
	"properties": {
		"folder": {
			"name": "01 data_domain/01 opco/01 opco_price_adjustment"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_opco_price_adj_process",
						"type": "DatasetReference"
					},
					"name": "opcoPriceAdj"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_opco_price_adj_mstr",
						"type": "DatasetReference"
					},
					"name": "sinkOpcoPriceAdjAdls"
				}
			],
			"transformations": [
				{
					"name": "selectHits"
				},
				{
					"name": "flattenHits"
				},
				{
					"name": "flattenPriceZone"
				},
				{
					"name": "flattenPriceProducts"
				},
				{
					"name": "filterEmtyHits"
				},
				{
					"name": "filterPriceZones"
				},
				{
					"name": "filterPriceProducts"
				},
				{
					"name": "removeDuplicate"
				},
				{
					"name": "projectAttributes"
				}
			],
			"scriptLines": [
				"parameters{",
				"     ES_INDEX_DOMAIN as string,",
				"     ES_INDEX_NAME as string,",
				"     APP_OPCO_ID as string,",
				"     APP_BANNER_ID as string",
				"}",
				"source(output(",
				"          {_scroll_id} as string,",
				"          took as integer,",
				"          timed_out as boolean,",
				"          {_shards} as (total as integer, successful as integer, skipped as integer, failed as integer),",
				"          hits as (total as integer, max_score as double, hits as ({_index} as string, {_type} as string, {_id} as string, {_score} as double, {_routing} as string, {_source} as (id as string, productIdentifier as (cncProductIdentifier as (bannerId as integer, storeNumber as integer, saleCode as string), upcs as string[]), couponId as integer, upcs as string[], startDate as string, endDate as string, uom as string, pricedProducts as (regularPrice as double, salePrice as double, conversionFactor as string, productId as integer)[], regularPrice as double, salePrice as double, saleTitle as string, saleMeta as (centsOff as string, percentOff as string, pricePoint as double), pickStoreLocationId as string, priceZones as (storeNumber as integer, bannerId as integer, ecomStoreId as integer, opcoId as string, id as integer, storeId as string)[], active as boolean))[])",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     moveFiles: [(concat(iif(lower($ES_INDEX_NAME) == \"cnc-products-oda\", \"opco-product-price\", ",
				"        iif(lower($ES_INDEX_NAME) == \"cnc-price-adjustments-oda\", \"opco-product-price-adj\",",
				"            iif(lower($ES_INDEX_NAME) == \"product-info\", \"static-product-info\",",
				"                iif(lower($ES_INDEX_NAME) == \"service_locations\", \"service-location\", \"error\")))), ",
				"          iif(lower($APP_OPCO_ID) == \"-\", \"/process\", concat(\"/\", lower($APP_OPCO_ID), \"/process\")))),(concat(iif(lower($ES_INDEX_NAME) == \"cnc-products-oda\", \"opco-product-price\", ",
				"        iif(lower($ES_INDEX_NAME) == \"cnc-price-adjustments-oda\", \"opco-product-price-adj\",",
				"            iif(lower($ES_INDEX_NAME) == \"product-info\", \"static-product-info\",",
				"                iif(lower($ES_INDEX_NAME) == \"service_locations\", \"service-location\", \"error\")))), ",
				"          iif(lower($APP_OPCO_ID) == \"-\", \"/process/archive\", concat(\"/\", lower($APP_OPCO_ID), \"/process/archive\"))))],",
				"     documentForm: 'documentPerLine') ~> opcoPriceAdj",
				"opcoPriceAdj select(mapColumn(",
				"          hits",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectHits",
				"filterEmtyHits foldDown(unroll(hits.hits),",
				"     mapColumn(",
				"          source = hits.hits.{_source}",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenHits",
				"filterPriceZones foldDown(unroll(source.priceZones),",
				"     mapColumn(",
				"          bannerId = source.productIdentifier.cncProductIdentifier.bannerId,",
				"          storeNumber = source.productIdentifier.cncProductIdentifier.storeNumber,",
				"          saleCode = source.productIdentifier.cncProductIdentifier.saleCode,",
				"          pricedProducts = source.pricedProducts,",
				"          opco = source.priceZones.opcoId,",
				"          storeId = source.priceZones.storeId,",
				"          ecomStoreId = source.priceZones.ecomStoreId,",
				"          priceZoneId = source.priceZones.id,",
				"          unitOfMeasure = source.uom,",
				"          active = source.active,",
				"          couponId = source.couponId",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenPriceZone",
				"filterPriceProducts foldDown(unroll(pricedProducts),",
				"     mapColumn(",
				"          bannerId,",
				"          storeNumber,",
				"          saleCode,",
				"          productId = pricedProducts.productId,",
				"          opco,",
				"          storeId,",
				"          ecomStoreId,",
				"          priceZoneId,",
				"          regularPrice = pricedProducts.regularPrice,",
				"          salePrice = pricedProducts.salePrice,",
				"          conversionFactor = pricedProducts.conversionFactor,",
				"          unitOfMeasure,",
				"          couponId,",
				"          active",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenPriceProducts",
				"selectHits filter(size(hits.hits) > 0) ~> filterEmtyHits",
				"flattenHits filter(size(source.priceZones) > 0) ~> filterPriceZones",
				"flattenPriceZone filter(size(pricedProducts) > 0) ~> filterPriceProducts",
				"flattenPriceProducts aggregate(groupBy(bannerId,",
				"          storeNumber,",
				"          saleCode,",
				"          productId),",
				"     opco = first(opco),",
				"          storeId = first(storeId),",
				"          ecomStoreId = first(ecomStoreId),",
				"          priceZoneId = first(priceZoneId),",
				"          regularPrice = first(regularPrice),",
				"          salePrice = first(salePrice),",
				"          conversionFactor = first(conversionFactor),",
				"          unitOfMeasure = first(unitOfMeasure),",
				"          couponId = first(couponId),",
				"          active = first(active)) ~> removeDuplicate",
				"removeDuplicate select(mapColumn(",
				"          bannerId,",
				"          storeNumber,",
				"          saleCode,",
				"          productId,",
				"          opco,",
				"          storeId,",
				"          ecomStoreId,",
				"          priceZoneId,",
				"          regularPrice,",
				"          salePrice,",
				"          conversionFactor,",
				"          unitOfMeasure,",
				"          couponId,",
				"          active",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> projectAttributes",
				"projectAttributes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          bannerId,",
				"          storeNumber,",
				"          saleCode,",
				"          productId,",
				"          opco,",
				"          storeId,",
				"          ecomStoreId,",
				"          priceZoneId,",
				"          regularPrice,",
				"          salePrice,",
				"          conversionFactor,",
				"          unitOfMeasure,",
				"          couponId,",
				"          active",
				"     )) ~> sinkOpcoPriceAdjAdls"
			]
		}
	}
}