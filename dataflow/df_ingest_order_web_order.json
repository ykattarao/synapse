{
	"name": "df_ingest_order_web_order",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_az_cosmos_web_order_domain",
						"type": "DatasetReference"
					},
					"name": "extractWebOrderOMS"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_az_adls_web_order_domain",
						"type": "DatasetReference"
					},
					"name": "ingest"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          orderId as string,",
				"          originalOrderId as string,",
				"          cncOrderId as integer,",
				"          cnsmId as string,",
				"          groceryTotalQy as double,",
				"          orderStatus as string,",
				"          pickupStatus as string,",
				"          prZoneCd as integer,",
				"          orderDescription as string,",
				"          slotId as integer,",
				"          deliveryMethod as string,",
				"          orderDate as string,",
				"          orderTime as string,",
				"          requestDate as string,",
				"          requestTime as string,",
				"          deliveryDate as string,",
				"          deliverySlotStart as string,",
				"          deliverySlotEnd as string,",
				"          shiftNumCd as integer,",
				"          shiftGroupCd as integer,",
				"          uniqueWaveId as integer,",
				"          paymentMethodCd as string,",
				"          liquorCd as string,",
				"          tobaccoCd as string,",
				"          drugCd as string,",
				"          outOfStockFl as string,",
				"          memberId as integer,",
				"          orderTypeCd as string,",
				"          backendCd as string,",
				"          printerPickCd as string,",
				"          capsId as integer,",
				"          listId as integer,",
				"          userId as integer,",
				"          totePickupCd as string,",
				"          invoiceTypeCd as string,",
				"          uploadToWmsCd as string,",
				"          fulfillmentMethod as string,",
				"          orderTotal as double,",
				"          yourSavingsTotal as double,",
				"          totalSavings as double,",
				"          zipCityId as integer,",
				"          cnsmTaxCd as string,",
				"          totalItemCount as integer,",
				"          delivery as (deliveryTypeCd as string, deliveryEmployeeId as string, shopEmployeeId as string, produceEmployeeId as string, redeliveryCd as string, deliveryPartnerFl as string, driverReleaseRequiredCd as string, shipTypeCd as string, note1 as string, note2 as string, note3 as string, podBagFl as string, unattendedInstructions as string),",
				"          storeDetails as (pupId as integer, newtonStoreId as string, p3StoreId as string, aholdStoreNumber as string, pupTypeCd as string, storeName as string, storeAddress1 as string, storeAddress2 as string, storeCity as string, storeState as string, storeZipcode as string, opcoId as string),",
				"          addressDetails as (firstName as string, lastName as string, address1 as string, address2 as string, city as string, state as string, zipCd as string, phoneCd as string, email as string),",
				"          items as (podId as integer, primUpcCd as string, lbEachCd as string, rqstQy as integer, ordQy as integer, shipQy as integer, unitPrice as double, regPrice as double, onSpecialCd as string, priceScaleQy as double, groceryAmt as double, locationCd as string, cncCouponCd as string, promotionId as integer, okToSub as string, subscriptionMadeCd as string, backRoomCd as string, shelfTagCd as string, itemCouponFlCd as string, totalGroceryAmtQy as double, itemAddCd as string, itemName as string, categoryId as string, categoryDesc as string)[],",
				"          totes as (containerId as integer, containerTypeCode as string, itemDownloadCode as string, rackLocationId as string, toteScanTypeCd as string)[],",
				"          orderDetails as (taxCd as string, itemCd as string, itemCdDesc as string, orderQy as double, priceQy as double, lineNum as integer)[],",
				"          payment as (billingStatus as string, billingCondition as string, paymentQy as double, orderItemQy as double, elecPaymentTransferCd as string, previousQy as double, orderTotalQy as double, cncPosSendDatetime as string, shopCardNum as string, taxGroupCd as string, accountBalanceUsedCd as string, mbrTypeCd as string, postCd as string, postId as integer, paymentMethods as (paymentMethod as string, accountNum as string, bankProvider as string, paymentType as string, creditCardType as string, creditCardTypeCd as string, firstName as string, lastName as string, address1 as string, address2 as string, city as string, state as string, zipCd as string)[], orderStateQy as double, overUnderQy as double),",
				"          yourSavings as (savingsDesc as string, savingsAmt as double)[],",
				"          weeklySpecials as (podId as integer, itemDesc as string, itemSavings as double)[],",
				"          orderPlacementCd as string,",
				"          auditMetadata as (creationDate as string, creationTime as string, creationId as string, updateDate as string, updateTime as string, updateId as string, printed as string, invoiceDateTime as string, printedDateTime as string, emailSentCd as string, transfer as (headerTransferCd as string, headerTransferDate as string, detailTransferCd as string, detailTransferDate as string)),",
				"          thirdPartyOrderTotalQuantity as double,",
				"          thirdPartyOrderTaxQuantity as double,",
				"          thirdPartyOrderBottleDepositQuantity as double,",
				"          archiveLoadDate as string,",
				"          cpntDoneCd as string,",
				"          subOrder as boolean,",
				"          taxQy as double,",
				"          bottleDepositQy as double,",
				"          releaseId as integer,",
				"          attributes as string[],",
				"          refundOrder as boolean,",
				"          ebtOrder as boolean,",
				"          bagFeeLiveDate as string,",
				"          bagPodId as integer,",
				"          ebtChargeFlag as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     enableChangeFeed: true,",
				"     changeFeedStartFromTheBeginning: true,",
				"     format: 'document',",
				"     systemColumns: true,",
				"     partitionBy('hash', 5,",
				"          orderId",
				"     )) ~> extractWebOrderOMS",
				"extractWebOrderOMS sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ingest"
			]
		}
	}
}