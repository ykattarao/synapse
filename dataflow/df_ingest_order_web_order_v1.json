{
	"name": "df_ingest_order_web_order_v1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_az_cosmos_web_order_domain",
						"type": "DatasetReference"
					},
					"name": "extractWebOrder"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_az_adls_web_order_domain",
						"type": "DatasetReference"
					},
					"name": "ingestWebOrders"
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(output(",
				"          addressDetails as (address1 as string, address2 as string, city as string, email as string, firstName as string, lastName as string, phoneCd as string, state as string, zipCd as string),",
				"          archiveLoadDate as date,",
				"          attributes as (attributeValue as string, auditCreationDateTime as string, auditUpdateDateTime as string, attributeCd as string)[],",
				"          auditMetadata as (creationDate as date, creationId as string, creationTime as string, invoiceDateTime as string, printed as string, printedDateTime as string, transfer as (detailTransferCd as string, detailTransferDate as date, headerTransferCd as string, headerTransferDate as date), updateDate as date, updateId as string, updateTime as string),",
				"          backendCd as string,",
				"          bagFeeData as (bagFeeOptCd as string, bagFeeDisclaimer as string, bagFeePrice as double),",
				"          bagFeeLiveDate as date,",
				"          bagPodId as integer,",
				"          basketId as integer,",
				"          bottleDepositQy as double,",
				"          capsId as integer,",
				"          cncOrderId as short,",
				"          cnsmId as string,",
				"          cnsmTaxCd as string,",
				"          couponDetails as (couponItemCode as string, couponDescription as string, couponTitle as string, couponTotalUsedQuantity as short, couponTotalSavingsQuantity as double, couponUpcs as (upcCd as string, couponPodId as integer)[], couponId as string, couponAuditMetadata as (creationId as string, creationDateTime as string))[],",
				"          couponRecords as (couponCd as string, couponRewardDesc as string, transferCd as string, couponRewardId as long, couponUPC as string, couponValue as double, familyCd as string, itemQy as integer, itemTaxQy as double, manufacturerCd as string, manufacturerRetailerCd as string, minQy as integer, podId as integer, subPodId as integer, taxCategoryCd as short, taxCd as string, taxLevelCd as string, taxRefundQy as double, transferDate as date)[],",
				"          couponsAndDiscounts as (savingsAmt as double, savingsDesc as string)[],",
				"          couponsDiscountsTotal as double,",
				"          cpntDoneCd as string,",
				"          customer as (addressDetails as (firstName as string, lastName as string, address1 as string, address2 as string, city as string, state as string, zipCd as string, phoneCd as string, email as string), customerPreferences as (preferenceValue as string, preferenceName as string)[], pupTimeOrderQuantity as integer, specialHandlingText as string, timeOrderQuantity as integer, typeCode as string),",
				"          delivery as (deliveryEmployeeId as string, deliveryPartnerFl as string, deliveryTypeCd as string, driverReleaseRequiredCd as string, note1 as string, note2 as string, note3 as string, podBagFl as string, produceEmployeeId as string, redeliveryCd as string, shipTypeCd as string, shopEmployeeId as string, unattendedInstructions as string, deliveryProof as string),",
				"          deliveryDate as date,",
				"          deliveryMethod as string,",
				"          deliverySlotEnd as string,",
				"          deliverySlotStart as string,",
				"          drugCd as string,",
				"          ebtChargeFlag as short,",
				"          ebtOrder as boolean,",
				"          ebtRefundAmount as double,",
				"          fields as string[],",
				"          flybuyCustomerPickUpAttributes as (phoneNumber as string, vehicleType as string, vehicleColor as string, token as string),",
				"          flyBuyOrder as boolean,",
				"          fulfillmentMethod as string,",
				"          groceryTotalQy as double,",
				"          invoiceTypeCd as string,",
				"          items as (actualOutOfStockAmtQy as double, actualOutOfStockQy as short, bottleDepositActualCharge as double, bottleDepositExtRate as double, categoryDesc as string, categoryId as string, categoryValueId as integer, categoryValueText as string, cncCouponCd as string, commentText as string, couponPrice as double, groceryAmt as double, itemAddCd as string, itemName as string, itemOutOfStock as boolean, itemShopCd as string, itemTypeCode as string, lbEachCd as string, locationCd as string, midTailVendorCd as short, numOfBottles as short, okToSub as string, onSpecialCd as string, ordQy as short, outOfStockAmt as double, outOfStockInventoryQy as short, outOfStockPickQy as short, outOfStockTotalQy as short, pickedWeights as (salePrice as double, lineNum as short, weight as double)[], podId as integer, priceScaleQy as double, primUpcCd as string, promotionId as integer, outQy as short, regPrice as double, rqstQy as short, sampleItemCode as string, selectedSubstitutePreference as integer, shipQy as short, sizeCode as string, subLossAmtQy as double, substituteItem as (bottleDepositActualCharge as double, bottleDepositExtRate as double, categoryValueId as integer, categoryValueText as string, cncCouponCd as string, couponPrice as double, fulfillPrice as double, groceryAmt as double, itemName as string, itemShopCd as string, weightIncrement as double, itemTypeCode as string, lbEachCd as string, locationCd as string, ordQy as short, origPodId as integer, outOfStockPickOriginalUnitQy as double, pickedWeights as (salePrice as double, lineNum as short, weight as double)[], podId as integer, priceScaleQy as double, primUpcCd as string, regPrice as double, sampleItemCode as string, shipOriginalUnitQy as double, shipQy as short, sizeCode as string, subQy as short, subRejectStatus as string, taxAmt as double, taxPct as double, totalPickedWeight as double), substitutePreferenceSelector as string, subscriptionMadeCd as string, backRoomCd as string, shelfTagCd as string, itemCouponFlCd as string, taxAmt as double, taxPct as double, totalBottleDepositQy as double, totalGroceryAmtQy as double, totalPickedWeight as double, totalTaxAmtQy as double, unitPrice as double, upcCd as double, weightIncrement as double)[],",
				"          isBillingApproved as boolean,",
				"          liquorCd as string,",
				"          listId as integer,",
				"          loyaltyNumber as string,",
				"          memberId as short,",
				"          migrateFlag as boolean,",
				"          orderDate as date,",
				"          orderDescription as string,",
				"          orderDetails as (itemCd as string, itemCdDesc as string, lineNum as short, orderQy as double, priceQy as double, taxCd as string)[],",
				"          orderDisplayId as short,",
				"          orderId as string,",
				"          orderPlacementCd as string,",
				"          midTailVendorCd as short,",
				"          orderStatus as string,",
				"          orderTime as string,",
				"          orderTotal as double,",
				"          orderTypeCd as string,",
				"          originalOrderId as string,",
				"          outOfStockFl as string,",
				"          payment as (accountBalanceUsedCd as string, accountBalances as (itemCd as string, itemCdDesc as string, priceQy as double, debitCreditCd as string, lineNum as integer)[], billingCondition as string, billingStatus as string, cncPosSendDatetime as string, elecPaymentTransferCd as string, mbrTypeCd as string, orderItemQy as double, orderStateQy as double, orderTotalQy as double, overUnderQy as double, paymentMethods as (accountNum as string, bankProvider as string, address1 as string, address2 as string, chkCrdtCardId as string, city as string, crdtCardIinCd as string, creditCardType as string, creditCardTypeCd as string, ebtBalanceQy as double, firstName as string, lastName as string, paymentAmount as double, paymentMethod as string, paymentType as string, state as string, zipCd as string)[], paymentQy as double, postCd as string, postId as integer, previousQy as double, taxGroupCd as string),",
				"          paymentMethodCd as string,",
				"          paymentMethodId as string,",
				"          pickupStatus as string,",
				"          prZoneCd as short,",
				"          previousBalances as (itemCdDesc as string, priceQy as double, itemCd as string)[],",
				"          printerPickCd as string,",
				"          purchaseOrderNum as string,",
				"          redeemDateTime as string,",
				"          redeemProcCode as string,",
				"          refundOrder as boolean,",
				"          releaseId as short,",
				"          requestDate as date,",
				"          requestTime as string,",
				"          route as (estimatedDepartedDateTime as timestamp, mdsLoadId as integer, routeDetailsList as (estimatedArrivalDateTime as timestamp, stopId as integer)[], stopQuantity as integer),",
				"          routeNumber as integer,",
				"          sequenceId as integer,",
				"          serviceId as integer,",
				"          serviceLocationId as integer,",
				"          shiftGroupCd as short,",
				"          shiftNumCd as short,",
				"          slotId as integer,",
				"          storeDetails as (aholdStoreNumber as string, dropLocationAddress1 as string, dropLocationAddress2 as string, dropLocationCity as string, dropLocationState as string, dropLocationZipcode as string, ignorePaperlessFl as string, locationInstruction as string, manifestIgnorePaperlessFl as string, newtonStoreId as string, p3StoreId as string, pupId as short, pupTypeCd as string, showTipOnInvoiceCd as string, storeAddress1 as string, storeAddress2 as string, storeCity as string, storeName as string, storeState as string, storeZipcode as string, subRejectCutoffWindow as long, subRejectNotificationCutoffWindow as long),",
				"          stopNumber as integer,",
				"          subOrder as boolean,",
				"          taxQy as double,",
				"          tobaccoCd as string,",
				"          totalItemCount as integer,",
				"          totalSavings as double,",
				"          totePickupCd as string,",
				"          totes as (containerId as integer, containerTypeCode as string, itemDownloadCode as string, rackLocationId as string, toteScanTypeCd as string)[],",
				"          thirdPartyOrderTotalQuantity as double,",
				"          thirdPartyOrderTaxQuantity as double,",
				"          thirdPartyOrderBottleDepositQuantity as double,",
				"          uniqueWaveId as short,",
				"          uploadToWmsCd as string,",
				"          userId as integer,",
				"          weeklySpecials as (itemDesc as string, itemSavings as double, podId as integer)[],",
				"          yourSavings as (savingsAmt as double, savingsDesc as string)[],",
				"          yourSavingsTotal as double,",
				"          zipCityId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     enableChangeFeed: true,",
				"     changeFeedStartFromTheBeginning: true,",
				"     format: 'document',",
				"     systemColumns: false) ~> extractWebOrder",
				"extractWebOrder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     preCommands: [],",
				"     postCommands: []) ~> ingestWebOrders"
			]
		}
	}
}